* pipeline-build pipeline 구성으로 진입

* 빌드 성공후 배포 Pipeline 실행
  - stage('Deploy') { } 을 다음으로 대체

        stage('Deploy') {
            steps {
                build(
                        job: 'pipeline-deploy',
                        // parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "${env.DEPLOY_ENABLED}")],
                        wait: false,
                        propagate: false
                )
            }
        }

  - 빌드후 pipeline-deploy 시작하는지 확인

* 배포 포함 여부 파라미터를 받아 선택적 실행

  - parameters { } 블럭을 커멘트 아웃 하고 다음으로 교체

    parameters {
        booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    }

  - stage('Deploy') 다음으로 교체

        stage('Deploy') {
            when {
                environment name: 'DEPLOY_ENABLED', value: 'true'
            }
            steps {
                build(
                         job: 'pipeline-deploy',
                         parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                         wait: false,
                         propagate: false
                )
            }
        }

  - 반드시 2번 빌드후, 파라미터 입력을 받고, 배포가 선택적으로 진행되는지 확인

* 빌드 브랜치 선택 파라미터 추가
  - 기존 입력했던 parameters { ... } 제거
  - 다음을 제일 앞쪽에 붙여 넣기

// 원래 parameters 는 stages 앞쪽에 선언적으로 배치하는 것이 가이드 되나,
// 명시적으로 선언적 pipeline 문법이 제공되지 않은 플러그도 선언적 pipeline 에 적용하기 위해 groovy script 로 작성
// 배치된 순서에 따라 노출이 되므로, parameters 에 적용할 수 있었던 gitParameter 와 booleanParam 도 적용
//
properties([
        parameters([
                gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/main', description: '배포할 브랜치를 선택합니다.', listSize: '3', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'NONE', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'GitParameterDefinition'),
                // https://www.jenkins.io/doc/pipeline/steps/pipeline-input-step/#input-wait-for-interactive-input
                [
                        $class              : 'DynamicReferenceParameter',
                        choiceType          : 'ET_FORMATTED_HTML',
                        name                : 'BRANCH_TO_BUILD',
                        referencedParameters: 'BRANCH',
                        script              : [
                                $class        : 'GroovyScript',
                                script        : [
                                        sandbox: true,
                                        script : groovy_script()
                                ],
                                fallbackScript: [
                                        sandbox: true,
                                        script : 'return ""'
                                ]
                        ]
                ],
                booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
        ])
])

  - 다음을 제일 텍스트의 가장 아래쪽 붙여넣기

def groovy_script() {
  return '''if (BRANCH == "") {
      return "origin/main 가 빌드 됩니다."
  } else {
      return "$BRANCH 가 빌드 됩니다."
  }'''
}


  - stage('Checkout') { .. } 의 branches 를 다음으로 교체

        branches: [[name: '${BRANCH}']]

  - 반드시 2번 빌드후, 파라미터 입력을 받고, 선택한 브랜치가 선택적으로 빌드 되는지 확인

* 파이프라인을 파일로 관리
  - 지금까지 작성한 파이프라인 스크립트를 github repo 의 main 브랜치의 /Jenkinsfile-build 에 저장후 커밋/푸시
  - pipeline-deploy > 구성 > Pipeline > Pipeline script from SCM
    - SCM > Git
      - Repository URL : git@github.com:[본인GITHUB계정]/fastcampus-jenkins.git
      - Credential : Github SSH키선택 (github-ssh로 지정했음)
      - Branch Specifier : ${BRANCH}
    - Script Path : Jenkinsfile-build
  - 빌드후 오류 확인
  - pipeline-deploy > 구성 > Pipeline > Pipeline script from SCM
    - Branch Specifier : ${BRANCH.replace("origin/", "*/")}
  - 빌드후 정상 동작 확인
