* pipeline 초기 프로젝트 생성
  - Dashboard > 새 Item
    - Pipeline 선택
    - Item명 : pipeline-build 지정
  - Dashboard > 새 Item
    - Pipeline 선택
    - Item명 : pipeline-deploy 지정
  - pipeline-build > Configuration > Pipeline
    - try sample Pipeline > Hello World 선택후 빌드후 로그 보기
    - try sample Pipeline > scripted Pipeline 선택후 빌드후 로그 보기

* pipeline-build에 초기 구조 지정후 로그 보기

pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    // 환경 변수 지정

    /**
    environment {
    }
    */

    /**
    triggers {
    }
    */

    /**
    options {
    }
    */

    /**
    parameters {
    }
    */


    // stages > stage > steps 순으로 구성
    stages {
        stage('Checkout') {
            steps {
                echo "Checkout"
            }
        }

        stage('Build') {
            steps {
                echo "Build"
            }
        }

        stage('SonarScanner') {
            steps {
                echo "SonarScanner"
            }
        }

        stage('Deploy') {
            steps {
                 echo "Deploy"
            }
        }
    }


    // post 는 stage 마다 실행시킬 수도 있고, 전체가 stages가 완료된 다음에 실행 시킬 수도 있음
    /*
    post {
        always {
        }
        success {
        }
    }
    */
}

* trigger / option 설정 하기
  - triggers 커멘트 제거후 다음 입력

    triggers {
        pollSCM '*/10 * * * *'
        // githubPush() // GitHub hook trigger for GITScm polling
    }

  - options 커멘트 제거후 다음 입력

    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        // github 프로젝트 설정
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/[본인GITHUB계정]/fastcampus-jenkins')
    }

  - 빌드후 구성을 눌러, 어떻게 triggers 와 options 가 반영되었는지 확인하기

* Github checkout 설정
  - stage('Checkout') { .. } 을 다음으로 대체하기

        stage('Checkout') {
            steps {
                checkout scmGit(
                        branches: [[name: 'origin/main']],
                        userRemoteConfigs: [[
                            // credential id 는 http://localhost:8080/pipeline-syntax/ 에서 checkout step 생성을 통해 확인 가능
                            credentialsId: '[각자의github ssh key에 대한 credential id]',
                            url: 'git@github.com:[[본인GITHUB계정]]/fastcampus-jenkins.git']
                        ],
                        extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
                )
            }
        }

  - 빌드후, 빌드를 클릭하여 Workspaces 에 어떻게 반영되었는지 확인

* Gradle 빌드 설정
  - stage('Build') {..} 부분을 다음으로 교체

        stage('Build') {
            steps {
                dir("projects/spring-app") {
                     sh "./gradlew build"
                }
            }
        }

  - 저장후, 빌드를 클릭하여 로그 확인
  - 방금전 steps 내부를 다음으로 교체

              // withGradle 을 하면, Gradle 로그를 해석
              dir("projects/spring-app") {
                  withGradle {
                       sh "./gradlew build"
                  }
              }

* SonarScanner 실행 설정
  - environment 의 커멘트를 제거하고 다음과 같이 입력

    environment {
        // jenkins 가 관리하는 도구의 위치는 이와 같이 환경 변수로 저장 가능
        SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }

  - stage('SonarQube') {..} 부분을 다음으로 교체

        stage('Build') {
            steps {
                // sonarqube 환경하에서, 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=sample \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app \
                        -Dsonar.login=각자의계정키
                  """
                }
            }
        }

  - 저장후, 빌드를 클릭하여 로그 확인
  - 앞에 입력한 steps 내부를 다음으로 교체

                // sonarqube 환경하에서, 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=sample \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app \
                        -Dsonar.login=[각자의SonarQube토큰]
                  """
                }

                // quality gate 통과시 까지 대기
                timeout(time: 1, unit: 'MINUTES') {

                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }

  - 빌드후 로그 확인

* 빌드후 조치 추가
  - 테스트 / jacoco / ktlint / Scm Forensic 결과 처리 추가
  - post { .. } 를 다음으로 교체

    // post 는 stage 마다 실행시킬 수도 있고, 전체가 stages가 완료된 다음에 실행 시킬 수도 있음
    post {
        always {
            scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
            mineRepository()
        }
    }

  - 이메일 / slack 전송 추가 - post { always { .. } } 스텝에 다음을 추가

            emailext attachLog: true, body: email_content(), subject: email_subject(), to: '각자의이메일주소'
            slackSend channel: "#jenkins", message: "${custom_msg(currentBuild.currentResult)}"

  - 파일의 제일 아래쪽에 다음 groovy 메소드를 추가

def email_subject() {
    return '빌드통지!! - ${DEFAULT_SUBJECT}'
}


def email_content() {
    return '''이 이메일은 중요한 것이여!!

${DEFAULT_CONTENT}

'''
}

def custom_msg(status) {
    return " $status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}

  - 빌드후 로그 확인
  - 아티팩트 아카이브 - post {  } 에 success { } 추가

         success {
             archiveArtifacts(
                artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar',
                followSymlinks: false
             )
         }

* 빌드 성공후 배포 Pipeline 실행
  - stage('Deploy') { } 을 다음으로 대체

        stage('Deploy') {
            steps {
                build(
                        job: 'pipeline-deploy',
                        // parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "${env.DEPLOY_ENABLED}")],
                        wait: false,
                        propagate: false
                )
            }
        }

  - 빌드후 pipeline-deploy 시작하는지 확인

* 배포 포함 여부 파라미터를 받아 선택적 실행

  - parameters { } 블럭을 커멘트 아웃 하고 다음으로 교체

    parameters {
        booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    }

  - stage('Deploy') 다음으로 교체

        stage('Deploy') {
            when {
                environment name: 'DEPLOY_ENABLED', value: 'true'
            }
            steps {
                build(
                         job: 'pipeline-deploy',
                         parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "${params.DEPLOY_ENABLED}")],
                         wait: false,
                         propagate: false
                )
            }
        }

  - 반드시 2번 빌드후, 파라미터 입력을 받고, 배포가 선택적으로 진행되는지 확인

* 빌드 브랜치 선택 파라미터 추가
  - 기존 입력했던 parameters { ... } 제거
  - 다음을 제일 앞쪽에 붙여 넣기

// 원래 parameters 는 stages 앞쪽에 선언적으로 배치하는 것이 가이드 되나,
// 명시적으로 선언적 pipeline 문법이 제공되지 않은 플러그도 선언적 pipeline 에 적용하기 위해 groovy script 로 작성
// 배치된 순서에 따라 노출이 되므로, parameters 에 적용할 수 있었던 gitParameter 와 booleanParam 도 적용
//
properties([
        parameters([
                gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/main', description: '배포할 브랜치를 선택합니다.', listSize: '3', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'NONE', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'GitParameterDefinition'),
                [
                        $class              : 'DynamicReferenceParameter',
                        choiceType          : 'ET_FORMATTED_HTML',
                        name                : 'BRANCH_TO_BUILD',
                        referencedParameters: 'BRANCH',
                        script              : [
                                $class        : 'GroovyScript',
                                script        : [
                                        sandbox: true,
                                        script : groovy_script()
                                ],
                                fallbackScript: [
                                        sandbox: true,
                                        script : 'return ""'
                                ]
                        ]
                ],
                booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
        ])
])

  - 다음을 제일 텍스트의 가장 아래쪽 붙여넣기

def groovy_script() {
  return '''if (BRANCH == "") {
      return "origin/main 가 빌드 됩니다."
  } else {
      return "$BRANCH 가 빌드 됩니다."
  }'''
}


  - stage('Checkout') { .. } 의 branches 를 다음으로 교체

        branches: [[name: '${BRANCH}']]

  - 반드시 2번 빌드후, 파라미터 입력을 받고, 선택한 브랜치가 선택적으로 빌드 되는지 확인

* 파이프라인을 파일로 관리
  - 지금까지 작성한 파이프라인 스크립트를 github repo 의 main 브랜치의 /Jenkinsfile-build 에 저장후 커밋/푸시
  - pipeline-deploy > 구성 > Pipeline > Pipeline script from SCM
    - SCM > Git
      - Repository URL : git@github.com:[본인GITHUB계정]/fastcampus-jenkins.git
      - Credential : Github SSH키선택
      - Branch Specifier : ${BRANCH}
    - Script Path : Jenkinsfile-build
  - 빌드후 오류 확인
  - pipeline-deploy > 구성 > Pipeline > Pipeline script from SCM
    - Branch Specifier : ${BRANCH.replace("origin/", "*/"}
  - 빌드후 정상 동작 확인
