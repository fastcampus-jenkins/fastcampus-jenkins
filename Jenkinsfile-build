pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    // 환경 변수 지정

    environment {
        // jenkins 가 관리하는 도구의 위치는 이와 같이 환경 변수로 저장 가능
        SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    }

    triggers {
        // pollSCM '*/10 * * * *'
        githubPush() // GitHub hook trigger for GITScm polling
    }

    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')
        // github 프로젝트 설정
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/fastcampus-jenkins/fastcampus-jenkins')
        // 브랜치를 지정하여 체크아웃 할 것이므로, 디폴트 체크아웃 disable
        skipDefaultCheckout()
    }

    // parameters {
    //     booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    // }

    // stages > stage > steps 순으로 구성
    stages {
        stage('Prepare') {
            steps {
                script {
                    properties([
                            parameters([
                                    gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/main', description: '배포할 브랜치를 선택합니다.', listSize: '3', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'NONE', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'GitParameterDefinition'),
                                    // https://www.jenkins.io/doc/pipeline/steps/pipeline-input-step/#input-wait-for-interactive-input
                                    [
                                            $class              : 'DynamicReferenceParameter',
                                            choiceType          : 'ET_FORMATTED_HTML',
                                            name                : 'BRANCH_TO_BUILD',
                                            referencedParameters: 'BRANCH',
                                            script              : [
                                                    $class        : 'GroovyScript',
                                                    script        : [
                                                            sandbox: true,
                                                            script : groovy_script()
                                                    ],
                                                    fallbackScript: [
                                                            sandbox: true,
                                                            script : 'return ""'
                                                    ]
                                            ]
                                    ],
                                    booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
                            ])
                    ])
                }
            }
        }
        
        stage('Checkout') {
            steps {

            echo "${BRANCH_NAME}"
                echo "branch ${params.BRANCH}"
                checkout scmGit(
                        branches: [[name: "${params.BRANCH}"]],
                        userRemoteConfigs: [[
                            // credential id 는 http://localhost:8080/pipeline-syntax/ 에서 checkout step 생성을 통해 확인 가능
                            credentialsId: 'github-ssh',
                            url: 'git@github.com:fastcampus-jenkins/fastcampus-jenkins.git']
                        ],
                        extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
                )
            }
        }

        stage('Build') {
            steps {
              // dir 은 디렉토리 이동
              dir("projects/spring-app") {
                  // withGradle 을 하면, Gradle 로그를 해석
                  withGradle {
                       sh "./gradlew build"
                  }
              }
            }
        }

        stage('SonarScanner') {
            when {
                expression {
                    // GIT_BRANCH 또는 BRANCH_NAME 는 Jenkinsfile 을 git 으로부터 checkout 할때만 사용 가능
                    // 대신 파라미터로 받는 BRANCH 활용
                    return params.BRANCH == "origin/main"
                }
            }
            steps {
                // sonarqube 환경하에서, 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                    ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=practice1 \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app
                     """
                }

                // quality gate 통과시 까지 대기
                timeout(time: 1, unit: 'MINUTES') {

                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            scanForIssues tool: ktLint(pattern: '**/ktlint/**/*.xml')
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
            mineRepository()
            emailext attachLog: true, body: email_content(), subject: email_subject(), to: 'junoyoon@gmail.com'
            slackSend channel: "#jenkins", message: "${custom_msg(currentBuild.currentResult)}"
        }

        success {
            archiveArtifacts artifacts: 'projects/spring-app/build/libs/*-SNAPSHOT.jar'
            script {
                        if (params.DEPLOY_ENABLED == true) {
                            build(
                                   job: 'pipeline-deploy',
                                   parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                                   wait: false,
                                   propagate: false
                            )
                        }
            }
        }
    }
}


def email_subject() {
    return '빌드통지!! - ${DEFAULT_SUBJECT}'
}

def email_content() {
    return '''이 이메일은 중요한 것이여!!

${DEFAULT_CONTENT}

'''
}

def custom_msg(status) {
    return " $status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}


def groovy_script() {
  return '''if (BRANCH == "") {
      return "origin/main 가 빌드 됩니다."
  } else {
      return "$BRANCH 가 빌드 됩니다."
  }'''
}
